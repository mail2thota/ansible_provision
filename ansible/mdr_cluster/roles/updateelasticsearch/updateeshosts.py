import yaml
import sys
import os
import log
import json
try:
    import requests
except ImportError:
    REQUESTS_FOUND = False
else:
    REQUESTS_FOUND = True


es_master_url = ''
eshosts = []

def get(es_url, path):
    try:
       r = requests.get(es_url + path)
       return r
    except Exception as e:
         log.log(log.LOG_ERROR,'Not able to connect to es server@{0} Reason : {1}'.format(es_url,e))
         sys.exit(1)

def getesUrl(configData):

    return "http://"+str(configData["es_master"]["host"])+":"+str(configData["es_master"].get("port","9200"))+"/"

def getClusterHosts(configdata):
  
   path = '_cat/nodes?format=json'
   r = get(getesUrl(configdata), path)
   if r.status_code == 200 :
       hosts = json.loads(r.content)
       for host in hosts:
                eshosts.append(host['name'])
   
   else:
     log.log(log.LOG_ERROR,'Unable to retrive hosts from es_master host :{0}'.format(r.content))
     sys.exit(1)

   with open('hosts','w') as hostFile:
       hostFile.write("\n[es]")
       for host in eshosts:
                hostFile.write("\n"'{0}'.format(host))
  

def generateHostFile(configData):

   hostsipmap = dict({})

   hosts = configData['es_node']
   if len(hosts['add']['hosts']) == 0:
        log.log(log.LOG_WARN,'add hosts are empty')
        return
   with open('hosts','a') as hostFile:
	       hostFile.write("\n[es_add]")
	       for host in hosts['add']['hosts']:
                    if host['name'] not in eshosts:
		      hostFile.write("\n"'{0}'.format(host['name']))
   	              if 'ip' in  host:
        	           hostsipmap[host['ip']] = host['name']
                    else:
                       log.log(log.LOG_WARN,'{0} is already exists in cluster skipping'.format(host['name']))  
               hostFile.write("\n[es_master]")
               hostFile.write("\n"'{0}'.format(configData['es_master']['host']))

        
   with open('add_hosts','w') as hostFile:
       for host in hostsipmap:
                hostFile.write('{0} {1}\n'.format(host,hostsipmap[host]))

def generateAllFile(config):
    with open('all', 'w') as allFile:
        allFile.write("\n\n\n\n#Generated by script ")
        for service in config:
            allFile.write("\n\n#Service :" + service)
            for property in config[service]:
                if property == 'host':
                      hostgroup = []
                      hostgroup.append(dict({"name": config[service][property]}))               
                      allFile.write("\n" + service + "_hosts: "+ str(hostgroup))
                else:
                    allFile.write("\n" + service + "_" + property + ": " + str(config[service][property]))
    allFile.close()
  

def main():

    config_file = ''
    if os.path.isfile(sys.argv[1]):
        config_file = sys.argv[1]
    
    else:
        log.log(log.LOG_ERROR,"Please suply the update_es_cluster.yml")
        log.log(log.LOG_ERROR, "No YAML provided")
        sys.exit(1)
    try:
        config_file = open(config_file, 'r')
        try:
            config = yaml.load(config_file)
            generateAllFile(config)   
            getClusterHosts(config)      
            generateHostFile(config) 
        except yaml.YAMLError, exc:
            log.log(log.LOG_ERROR, "Failed to load/parse import config YAML, Error:'{0}'".format(exc))
            log.log(log.LOG_INFO, "Check if '{0}' formatted correctly".format(config_file))
            sys.exit(1)
        config_file.close()
    except IOError as e:
        log.log(log.LOG_ERROR, "Failed to open/load import config YAML Error:'{0}'".format(e))
        log.log(log.LOG_INFO, "Check if '{0}' is available".format(config_file))
        sys.exit(1)


if __name__ == '__main__':
    main()

