

def init():
    global kickstarter_default
    kickstarter_default = {'template': '<%#\nkind: provision\nname: Kickstart default\noses:\n- CentOS\n- Fedora\n%>\n<%#\nThis template accepts the following parameters:\n- lang: string (default="en_US.UTF-8")\n- selinux-mode: string (default="enforcing")\n- keyboard: string (default="us")\n- time-zone: string (default="UTC")\n- http-proxy: string (default="")\n- http-proxy-port: string (default="")\n- force-puppet: boolean (default=false)\n- enable-epel: boolean (default=true)\n- enable-puppetlabs-repo: boolean (default=false)\n- enable-puppetlabs-pc1-repo: boolean (default=false)\n- salt_master: string (default=undef)\n- ntp-server: string (default="0.fedora.pool.ntp.org")\n- bootloader-append: string (default="nofb quiet splash=quiet")\n- disable-firewall: boolean (default=false)\n- package_upgrade: boolean (default=true)\n- disable-uek: boolean (default=false)\n%>\n<%\n  rhel_compatible = @host.operatingsystem.family == \'Redhat\' && @host.operatingsystem.name != \'Fedora\'\n  os_major = @host.operatingsystem.major.to_i\n  realm_compatible = (@host.operatingsystem.name == \'Fedora\' && os_major >= 20) || (rhel_compatible && os_major >= 7)\n  # safemode renderer does not support unary negation\n  pm_set = @host.puppetmaster.empty? ? false : true\n  proxy_uri = @host.params[\'http-proxy\'] ? "http://#{@host.params[\'http-proxy\']}:#{@host.params[\'http-proxy-port\']}" : nil\n  proxy_string = proxy_uri ? " --proxy=#{proxy_uri}" : \'\'\n  puppet_enabled = pm_set || @host.param_true?(\'force-puppet\')\n  salt_enabled = @host.params[\'salt_master\'] ? true : false\n  chef_enabled = @host.respond_to?(:chef_proxy) && @host.chef_proxy\n section_end = (rhel_compatible && os_major <= 5) ? \'\' : \'%end\'\n%>\ninstall\n<%= @mediapath %><%= proxy_string %>\nlang <%= @host.params[\'lang\'] || \'en_US.UTF-8\' %>\nselinux --<%= @host.params[\'selinux-mode\'] || @host.params[\'selinux\'] || \'enforcing\' %>\nkeyboard <%= @host.params[\'keyboard\'] || \'us\' %>\nskipx\n\n<% subnet = @host.subnet -%>\n<% if subnet.respond_to?(:dhcp_boot_mode?) -%>\n<% dhcp = subnet.dhcp_boot_mode? && !@static -%>\n<% else -%>\n<% dhcp = !@static -%>\n<% end -%>\nnetwork --bootproto <%= dhcp ? \'dhcp\' : "static --ip=#{@host.ip} --netmask=#{subnet.mask} --gateway=#{subnet.gateway} --nameserver=#{[subnet.dns_primary, subnet.dns_secondary].select{ |item| item.present? }.join(\',\')}" %> --hostname <%= @host %><%= os_major >= 6 ? " --device=#{@host.mac}" : \'\' -%>\n\nrootpw --iscrypted <%= root_pass %>\n<% if @host.param_true?(\'disable-firewall\') -%>\nfirewall --disable\n<% else -%>\nfirewall --<%= os_major >= 6 ? \'service=\' : \'\' %>ssh\n<% end -%>\nauthconfig --useshadow --passalgo=<%= @host.operatingsystem.password_hash || \'sha256\' %> --kickstart\ntimezone --utc <%= @host.params[\'time-zone\'] || \'UTC\' %>\n<% if rhel_compatible -%>\nservices --disabled gpm,sendmail,cups,pcmcia,isdn,rawdevices,hpoj,bluetooth,openibd,avahi-daemon,avahi-dnsconfd,hidd,hplip,pcscd\n<% end -%>\n\n<% if realm_compatible && @host.info[\'parameters\'][\'realm\'] && @host.realm && @host.realm.realm_type == \'Active Directory\' -%>\n# One-time password will be requested at install time. Otherwise, $HOST[OTP] is used as a placeholder value.\nrealm join --one-time-password=\'<%= @host.otp || "$HOST[OTP]" %>\' <%= @host.realm %>\n<% end -%>\n\n<% if @host.operatingsystem.name == \'Fedora\' -%>\nrepo --name=fedora-everything --mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-<%= @host.operatingsystem.major %>&arch=<%= @host.architecture %><%= proxy_string %>\n<% end -%>\n\n<% if @host.operatingsystem.name == \'OracleLinux\' && os_major == 7 -%>\nrepo --name="Server-Mysql"\n<% end -%>\n\n<% if @host.operatingsystem.name == \'Fedora\' and os_major <= 16 -%>\n# Bootloader exception for Fedora 16:\nbootloader --append="<%= @host.params[\'bootloader-append\'] || \'nofb quiet splash=quiet\' %> <%=ks_console%>" <%= grub_pass %>\npart biosboot --fstype=biosboot --size=1\n<% else -%>\nbootloader --location=mbr --append="<%= @host.params[\'bootloader-append\'] || \'nofb quiet splash=quiet\' %>" <%= grub_pass %>\n<% if os_major == 5 -%>\nkey --skip\n<% end -%>\n<% end -%>\n\n<% if @dynamic -%>\n%include /tmp/diskpart.cfg\n<% else -%>\n<%= @host.diskLayout %>\n<% end -%>\n\ntext\n<% if @host.respond_to?(:bootdisk_build?) && @host.bootdisk_build? %>\nreboot --eject\n<% else -%>\nreboot\n<% end -%>\n\n%packages\nyum\ndhclient\nntp\nwget\n@Core\n<% if os_major >= 6 -%>\nredhat-lsb-core\n<% end -%>\n<% if salt_enabled %>\nsalt-minion\n<% end -%>\n<%= section_end -%>\n\n<% if @dynamic -%>\n%pre\n<%= @host.diskLayout %>\n<%= section_end -%>\n<% end -%>\n\n%post --nochroot\nexec < /dev/tty3 > /dev/tty3\n#changing to VT 3 so that we can see whats going on....\n/usr/bin/chvt 3\n(\ncp -va /etc/resolv.conf /mnt/sysimage/etc/resolv.conf\n/usr/bin/chvt 1\n) 2>&1 | tee /mnt/sysimage/root/install.postnochroot.log\n<%= section_end -%>\n\n%post\nlogger "Starting anaconda <%= @host %> postinstall"\nexec < /dev/tty3 > /dev/tty3\n#changing to VT 3 so that we can see whats going on....\n/usr/bin/chvt 3\n(\n<% if subnet.respond_to?(:dhcp_boot_mode?) -%>\n<%= snippet \'kickstart_networking_setup\' %>\n<% end -%>\n\n#update local time\necho "updating system time"\n/usr/sbin/ntpdate -sub <%= @host.params[\'ntp-server\'] || \'0.fedora.pool.ntp.org\' %>\n/usr/sbin/hwclock --systohc\n\n<% if proxy_uri -%>\n# Yum proxy\necho \'proxy = <%= proxy_uri %>\' >> /etc/yum.conf\n<% end -%>\n\n<% if rhel_compatible && !@host.param_false?(\'enable-epel\') -%>\n<%= snippet \'epel\' -%>\n<% end -%>\n\n<% if @host.info[\'parameters\'][\'realm\'] && @host.realm && @host.realm.realm_type == \'FreeIPA\' -%>\n<%= snippet \'freeipa_register\' %>\n<% end -%>\n\n<% unless @host.param_false?(\'package_upgrade\') -%>\n# update all the base packages from the updates repository\nif [ -f /usr/bin/dnf ]; then\n  dnf -y update\nelse\n  yum -t -y update\nfi\n<% end -%>\n\n<%= snippet(\'remote_execution_ssh_keys\') %>\n\n<% if chef_enabled %>\n<%= snippet \'chef_client\' %>\n<% end -%>\n\n<% if puppet_enabled %>\n<% if @host.param_true?(\'enable-puppetlabs-pc1-repo\') || @host.param_true?(\'enable-puppetlabs-repo\') -%>\n<%= snippet \'puppetlabs_repo\' %>\n<% end -%>\n<%= snippet \'puppet_setup\' %>\n<% end -%>\n\n<% if salt_enabled %>\n<%= snippet \'saltstack_setup\' %>\n<% end -%>\n\n<% if @host.operatingsystem.name == \'OracleLinux\' && @host.param_true?(\'disable-uek\') -%>\n# Uninstall the Oracle Unbreakable Kernel packages\nyum -t -y remove kernel-uek*\nsed -e \'s/DEFAULTKERNEL=kernel-uek/DEFAULTKERNEL=kernel/g\' -i /etc/sysconfig/kernel\n<% end -%>\n\nsync\n\n# Inform the build system that we are done.\necho "Informing Foreman that we are built"\nwget -q -O /dev/null --no-check-certificate <%= foreman_url(\'built\') %>\n) 2>&1 | tee /root/install.post.log\nexit 0\n\n<%= section_end -%>\n'}
